// JavaScript used for the Vulnerability Dictionary Page's functionality.

populateDict();


// Grab all boxes with the class "content-box" and loop through em, adding em to the hamburger button list
function dropdownToggle() {
    document.getElementById("dropdown-button").classList.toggle("hide-button");
    document.getElementById("dropdown-menu").classList.toggle("show-menu");
}

// Populates the page with the vulnerabilities and table of contents anchors
async function populateDict() {
    // Put the json object in vulnerabilityDict
    const response = await fetch("../assets/webScraperResults.json");
    const vulnerabilityDict = await response.json();

    // Go through all vulnerabilities in the object, with vulnNum as the key
    for (const vulnNum in vulnerabilityDict) {
        
        // Append header and content of each vulnerability
        document.body.appendChild(getHeaderElement(vulnerabilityDict[vulnNum]));
        document.body.appendChild(getContentElement(vulnerabilityDict[vulnNum]));
    }

    // Assign anchors for the table of contents
    createTableAnchors();
}

// Creates the header element for a given vulnerability (its name)
function getHeaderElement(vulnerability) {
    const headerElement = document.createElement("div");
    headerElement.className = "content-header";
    headerElement.id = vulnerability["alertID"];

    // Check if the vulnerability is the child of another vulnerability. If so, grab its place in parent-child heirarchy from the id.
    let headerContent = vulnerability["alertName"];
    if (vulnerability["alertID"].includes("-")) {
        headerContent += " - " + vulnerability["alertID"].split("-")[1];
    }
    headerElement.textContent = headerContent;
    return headerElement;
}

// Creates the content element for a given vulnerability (the vulnerability info)
function getContentElement(vulnerability) {
    const contentElement = document.createElement("div");
    contentElement.className = "content-box";

    // Order in which we want the information to appear in the dictionary. Ensure the order of both arrays match.
    const headerNames = ["ID", "Type", "Risk", "CWE ID", "WASC ID", "Tech Targeted", "Summary", "Solution", "Other Info", "References"]
    const infoOrder = ["alertID", "alertType", "alertRisk", "alertCWEID", "alertWASCID", "alertTechTargeted", "alertSummary", "alertSolution", "alertOtherInfo", "alertReferences"];

    // Go through both arrays and append corresponding content from either array to the body of our content element.
    for (let i = 0; i < headerNames.length; i++) {
        const headerElement = document.createElement("div");
        headerElement.className="vulnerability-header";
        headerElement.textContent=headerNames[i];

        const infoElement = document.createElement("p");
        infoElement.textContent=vulnerability[infoOrder[i]];

        contentElement.appendChild(headerElement);
        contentElement.appendChild(infoElement);
    }
    
    return contentElement;

}

// Automatically adds the anchors for the different sections to the Table of Contents.
function createTableAnchors() {
    // Grab the dropdown box
    let anchorDiv = document.getElementById("anchor-div");
    // Grab the table of contents element
    let tableDiv = document.getElementById("table-of-contents");
    // Grab all content header elements (these will be where the anchors point to)
    let contentBoxes = document.getElementsByClassName("content-header")
    // Go through all headers
    Array.from(contentBoxes).forEach( element => {
        // If element has no id, don't link to it (would otherwise be a blank anchor)
        if (element.id == "") {
            return;
        }
        // Create an anchor element and have it link to the element's id
        let anchorElement = document.createElement("a");
        anchorElement.setAttribute('href', "#" + element.id);
        // Set the text of the anchor to be the vulnerability's name (text content of its header)
        anchorElement.innerText = element.textContent;
        // Add line break
        let lineBreak = document.createElement("br");
        // Create identical copy of the previous two elements to add to the table of contents
        let anchorElementCopy = document.createElement("a");
        anchorElementCopy.setAttribute('href', "#" + element.id);
        anchorElementCopy.innerText = element.textContent;
        let lineBreakCopy = document.createElement("br");
        tableDiv.append(anchorElement);
        tableDiv.append(lineBreak);

        anchorDiv.append(anchorElementCopy);    
        anchorDiv.append(lineBreakCopy);
        
        }
        
     )
}





